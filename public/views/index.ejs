<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" href="img/logo.png" />

    <!-- <link rel="stylesheet" type="text/css" href="vendors/bootstrap/css/bootstrap.min.css" /> -->
    <!-- <link rel="stylesheet" type="text/css" href="css/app.css" /> -->
</head>

<body>

    <form enctype="multipart/form-data">
        <input id="upload" type=file name="files[]">
    </form>

    <textarea class="form-control" style="margin-top: 1rem;" rows=35 cols=50 id="xlx_json"></textarea>

    <input type="text" id="input-gmail">
    <button id="ok">ok</button>

    <textarea class="form-control" style="margin-top: 1rem;" rows=35 cols=50 id="export"></textarea>
    <button id="export-btn">Export to .txt</button>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.2/jszip.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.2/xlsx.min.js"></script>
    <script>

        var duoimail = []
        let datafinal = []
        var ExcelToJSON = function () {

            this.parseExcel = function (file) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = e.target.result;
                    var workbook = XLSX.read(data, {
                        type: 'binary'
                    });
                    workbook.SheetNames.forEach(function (sheetName) {
                        // Here is your object
                        var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                        var json_object = JSON.stringify(XL_row_object);
                        let data = JSON.parse(json_object)
                        let gmail
                        data.forEach(element => {
                            gmail += element.email + "\n"
                            duoimail.push(element.email)
                        });
                        $('#xlx_json').val(gmail);
                    })
                };

                reader.onerror = function (ex) {
                    console.log(ex);
                };

                reader.readAsBinaryString(file);
            };
        };

        function handleFileSelect(evt) {

            var files = evt.target.files; 
            var xl2json = new ExcelToJSON();
            xl2json.parseExcel(files[0]);
        }

        $('#ok').on("click", function () {
            let exportdata
            duoimail.forEach(element => {
                if (element.includes($('#input-gmail').val().trim())) {
                    datafinal.push(element + "\n")
                    exportdata += element + "\n"
                }
            })
            $('#export').val(exportdata);
        })

        $('#export-btn').on("click", function () {
            var a = document.createElement('a');
            var file = new Blob(datafinal, { type: 'text/plain' });
            a.href = URL.createObjectURL(file);
            a.download = 'info.txt';
            a.click()
        })

        function makeTextFile(afilename, output) {
            var txtFile = new File(afilenam);
            txtFile.writeln(output);
            txtFile.close();
        }

    </script>



    <script>
        document.getElementById('upload').addEventListener('change', handleFileSelect, false);

    </script>

</body>

</html>